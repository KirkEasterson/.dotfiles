"""""""""" OPTIONS
let mapleader=" " " leader is space
let g:mapleader = "\<Space>"

set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

let g:netrw_home = $XDG_DATA_HOME."/vim"
call mkdir($XDG_DATA_HOME."/vim/spell", 'p')

set backupdir=$XDG_STATE_HOME/vim/backup | call mkdir(&backupdir, 'p')
set directory=$XDG_STATE_HOME/vim/swap   | call mkdir(&directory, 'p')
set undodir=$XDG_STATE_HOME/vim/undo     | call mkdir(&undodir,   'p')
set viewdir=$XDG_STATE_HOME/vim/view     | call mkdir(&viewdir,   'p')

if !has('nvim') | set viminfofile=$XDG_STATE_HOME/vim/viminfo | endif

set updatetime=50 " fast update times

set completeopt=menu,menuone,noselect
set number relativenumber " turn hybrid line numbers on
set cursorline " highlight current line
set termguicolors
set confirm

set incsearch " highlight matches as you type
set hlsearch " highlight matches once a search is complete
set nohlsearch " turn off search highlight

set autoindent " new lines inherit the indentation of previous lines.
set nowrap " don't wrap lines
set linebreak " avoid wrapping a line in the middle of a word

syntax enable " enable syntax highlighting
set showmatch " highlight matching [{()}]

set scrolloff=8 " scroll when x away from edge
set signcolumn=yes " column for linting
set colorcolumn=80 " 80col limit

set tabstop=4 " number of visual spaces per TAB
set softtabstop=4 " number of spaces in tab when editing
set shiftwidth=4 " number of spaces when indenting with <>
filetype indent on " load filetype-specific indent files
filetype plugin indent on " TODO: is this line redundant?

let g:highlightedyank_highlight_duration = 200

set mouse=a " enable mouse for scrolling and resizing
set wildmenu " visual autocomplete for command menu
set lazyredraw " redraw only when we need to.
set exrc " use local vimrc, if it exists

"""""""""" MAPPINGS
" navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" center results
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap J mzJ`z

" easier undos
inoremap , ,<c-g>u
inoremap . .<c-g>u
inoremap [ [<c-g>u
inoremap ! !<c-g>u
inoremap ? ?<c-g>u

" easy saving/quitting
nnoremap <leader>w :w<cr>
nnoremap <leader>q :q<cr>
nnoremap <leader>z :qa<cr>

" rehighlight indentation
vnoremap < <gv
vnoremap > >gv

" easy window navigation shortcuts
nnoremap <silent> <leader>h :wincmd h<CR>
nnoremap <silent> <leader>j :wincmd j<CR>
nnoremap <silent> <leader>k :wincmd k<CR>
nnoremap <silent> <leader>l :wincmd l<CR>

nnoremap <leader>e :NERDTreeToggle<CR>
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>

"""""""""" AUTOCMDS
augroup WrapLineInLatexFile
	autocmd!
	autocmd FileType tex setlocal wrap
augroup END

augroup WrapLineInMarkdownFile
	autocmd!
	autocmd FileType markdown setlocal wrap
augroup END

" remove trailing whitespace on each save
autocmd BufWritePre * :%s/\s\+$//e

" build notes
autocmd BufWritePost *note-*.md silent !notes.sh build %:p

"""""""""" PLUGINS
" Bootstrap vim-plug
if empty(glob('~/.config/vim/autoload/plug.vim'))
  silent !curl -fLo ~/.config/vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

call plug#begin()

Plug 'morhetz/gruvbox'
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'liuchengxu/vim-which-key'

call plug#end()

let g:NERDTreeWinPos = 'right'
let g:NERDTreeShowHidden = 1

set background=dark
autocmd vimenter * ++nested colorscheme gruvbox

" autocommands that call SyncNerdTree() when the buffer is changed or written
" to
augroup nerd_tree_sync_current_dir
  autocmd!
  autocmd BufEnter * call SyncNERDTree()
  autocmd BufWrite * call SyncNERDTree()
augroup end

" sync NERDTree with the current file open
function SyncNERDTree()
  " make sure the buffer isn't a NERDTree buffer, it is not empty, and also
  " make sure the buffer contains a file
  " file
  if stridx(bufname('%'), 'NERD_tree_') == -1 && bufname() != "" && &buftype == "" && &filetype != ""
    cd %:p:h
    " open a new NERDTree buffer and close it
    NERDTree
    NERDTreeClose
  endif
endfunction
