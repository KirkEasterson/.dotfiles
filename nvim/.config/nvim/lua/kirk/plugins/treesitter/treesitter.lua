return {
	"nvim-treesitter/nvim-treesitter",
	cond = not vim.g.started_by_firenvim,
	event = "VimEnter",
	build = ":TSUpdate",
	main = "nvim-treesitter.configs",
	cmd = {
		"TSBufDisable",
		"TSBufEnable",
		"TSDisable",
		"TSEnable",
		"TSModuleInfo",
	},
	opts = {
		modules = {},
		auto_install = true,
		sync_install = false,
		indent = {
			enable = true,
		},
		highlight = {
			enable = true,
			additional_vim_regex_highlighting = false,
			disable = function(lang, buf)
				local max_filesize = 100 * 1024 -- 100 KB
				local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))
				if ok and stats and stats.size > max_filesize then
					return true
				end
			end,
		},
		incremental_selection = {
			enable = true,
			keymaps = {
				init_selection = "gnn", -- set to `false` to disable one of the mappings
				node_incremental = "grn",
				scope_incremental = "grc",
				node_decremental = "grm",
			},
		},
		ensure_installed = {
			"bash",
			"bibtex",
			"c",
			"c_sharp",
			"clojure",
			"cmake",
			"comment",
			"commonlisp",
			"cpp",
			"css",
			"csv",
			"diff",
			"dockerfile",
			"doxygen",
			"fennel",
			"fish",
			"git_config",
			"git_rebase",
			"gitattributes",
			"gitcommit",
			"gitignore",
			"go",
			"gomod",
			"gosum",
			"gowork",
			"haskell",
			"haskell_persistent",
			"hjson",
			"html",
			"http",
			"java",
			"javascript",
			"json",
			"json5",
			"jsonc",
			"jsonnet",
			"kotlin",
			"latex",
			"lua",
			"luadoc",
			"luap",
			"luau",
			"make",
			"markdown",
			"markdown_inline",
			"nix",
			"norg",
			"ocaml",
			"ocaml_interface",
			"proto",
			"python",
			"regex",
			"sxhkdrc",
			"terraform",
			"todotxt",
			"toml",
			"tsv",
			"typescript",
			"vim",
			"vimdoc",
			"xml",
			"yaml",
			"zig",
		},
	},
}
